#!/usr/bin/env python
"""Command line interface for ContaMiner."""

import logging

import argh

from contaminer import contaminer


def init():
    """
    Initialize the ContaBase.

    """
    contaminer.init()


@argh.arg('rank', type=int, help="Rank of the process to run.")
def init_task(rank):
    """
    Run morda_prep for a given model.

    """
    contaminer.init_task(rank)


@argh.arg('diffraction_file', help="MTZ or CIF file.")
@argh.arg('models', nargs='*', help="List of contaminants to test.")
def prepare(diffraction_file, models):
    """
    Prepare a task.

    Generate arguments file and put all files in the right place.

    """
    contaminer.prepare(diffraction_file, models)


@argh.arg('prep_dir', help="Directory created by prepare step.")
@argh.arg('rank', type=int, help="Rank of the process to run.")
def solve(prep_dir, rank):
    """
    Run the solving task.

    """
    contaminer.solve(prep_dir, rank)


@argh.arg('prep_dir', help="Directory created by prepare step.")
def submit(prep_dir):
    """
    Submit the job to a scheduler.

    Fill in a template, and use the provided command to submit the script
    to a job scheduler.

    """
    contaminer.submit(prep_dir)


@argh.arg('prep_dir', help="Directory created by prepare step.")
def display(prep_dir):
    """
    Compile all results of a job into the tasks file and print it.

    Consult each task, retrieve the results if available, and write all
    of them in the tasks.json file, then display the content of the file.

    """
    contaminer.display(prep_dir)


if __name__ == "__main__":
    # Change console logging level to INFO.
    CONSOLE = logging.StreamHandler()
    CONSOLE.setLevel(logging.INFO)
    logging.getLogger().addHandler(CONSOLE)
    logging.getLogger().setLevel(logging.INFO)

    argh.dispatch_commands([
        init,
        init_task,
        prepare,
        solve,
        submit,
        display,
    ])
